/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2015 Kurento (https://kurento.openvidu.io/)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var inherits = require('inherits');

var kurentoClient = require('kurento-client');

var disguise = kurentoClient.disguise;

var ChecktypeError = kurentoClient.checkType.ChecktypeError;

var MediaElement = kurentoClient.register.abstracts.MediaElement;


/**
 * Create a {@link VideoSampler}
 *
 * @classdesc
 *  VideoSampler interface. This type of {@link Filter} samples at a configured 
 *  rate frames from its video source and delivers it using gRPC to a configured
 *                The specification of the GRPC service that should receive 
 *                images is as follows:
 *                <p>
 *                <code>
 *                syntax = &quot;proto3&quot;;
 *                package videoSampler;
 *                service ImageDeliver {
 *                    rpc deliverImage (SampleImage) returns (Empty) {}
 *                }
 *                message SampleImage {
 *                    string codec        = 1;
 *                    bytes  data         = 2;
 *                    string timestamp    = 3;
 *                }
 *                message Empty { }
 *                </code>
 *
 * @extends module:core/abstracts.MediaElement
 *
 * @constructor module:videosampler.VideoSampler
 *
 * @fires {@link module:videosampler#event:SampleImageDelivered SampleImageDelivered}
 */
function VideoSampler(){
  VideoSampler.super_.call(this);
};
inherits(VideoSampler, MediaElement);


/**
 * @alias module:videosampler.VideoSampler.constructorParams
 *
 * @property {external:String} [endpointUrl]
 *  gRPC endpoint where images wil be delivered.Set to empty string or invalir 
 *  endpoint url to not send sampled imaged
 *
 * @property {external:Integer} framePeriod
 *  Milliseconds between sampled images
 *
 * @property {external:Integer} [height]
 *  Height of the sampled images, 0 to keep original
 *
 * @property {module:videosampler/complexTypes.ImageDelivery} [imageDeliveryMethod]
 *  Method used for image delivery, currently only gRPC supported
 *
 * @property {module:videosampler/complexTypes.ImageEncoding} [imageEncoding]
 *  Encoding of the delivered images
 *
 * @property {module:core.MediaPipeline} mediaPipeline
 *  the {@link MediaPipeline} to which the filter belongs
 *
 * @property {external:String} [metadata]
 *  metadata attached to this filter that will be relayed to the gRPC service 
 *  when delivering images
 *
 * @property {external:Integer} [width]
 *  Width of the sampled images, 0 to keep original
 */
VideoSampler.constructorParams = {
  endpointUrl: {
    type: 'String'  },
  framePeriod: {
    type: 'int',
    required: true
  },
  height: {
    type: 'int'  },
  imageDeliveryMethod: {
    type: 'videosampler.ImageDelivery'  },
  imageEncoding: {
    type: 'videosampler.ImageEncoding'  },
  mediaPipeline: {
    type: 'kurento.MediaPipeline',
    required: true
  },
  metadata: {
    type: 'String'  },
  width: {
    type: 'int'  }
};

/**
 * @alias module:videosampler.VideoSampler.events
 *
 * @extends module:core/abstracts.MediaElement.events
 */
VideoSampler.events = MediaElement.events.concat(['SampleImageDelivered']);


/**
 * Checker for {@link module:videosampler.VideoSampler}
 *
 * @memberof module:videosampler
 *
 * @param {external:String} key
 * @param {module:videosampler.VideoSampler} value
 */
function checkVideoSampler(key, value)
{
  if(!(value instanceof VideoSampler))
    throw ChecktypeError(key, VideoSampler, value);
};


module.exports = VideoSampler;

VideoSampler.check = checkVideoSampler;
